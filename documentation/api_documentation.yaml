openapi: 3.0.3
info:
  title: RumahResep
  version: 1.0.0
  description: RumahResep RESTfulAPI Documentation with Echo Framework (Go Languange)
servers:
  - url: http://servername/api/
    description: API Access Link for RumahResep
tags:
  - name: Auth
    description: API Authentication
  - name: Customers
    description: API Customers
  - name: Sellers
    description: API Sellers
  - name: Profiles
    description: API Profiles
  - name: Recipes
    description: API Recipes
  - name: Categories
    description: API Recipes Categories
  - name: Carts
    description: API Carts
  - name: Checkouts
    description: API Checkouts
  - name: Transactions
    description: API Transactions
  - name: Transaction Histories
    description: API Transaction Histories
  - name: Stocks
    description: API Stock Recipes
  # - name: Payment Midtrans
  #   description: API Snap Midtrans
  # - name: Maps
  #   description: API Location Maps

paths:
  /register:
    post:
      security:
        - bearerAuth: []
      tags:
        - Auth
      summary: Register User - All User
      requestBody:
        required: true
        content:
          'application/json':
            schema:
              type: object
              properties:
                name:
                  type: string
                email:
                  type: string
                password:
                  type: string
                address:
                  type: string
                gender:
                  type: string
                role:
                  type: string
      responses:
        '200':
          $ref: '#/components/responses/ResponseRegister'
        '400':
          $ref: '#/components/responses/BadRequest'
        '500':
          $ref: '#/components/responses/ServerError'

  /login:
    post:
      security:
        - bearerAuth: []
      tags:
        - Auth
      summary: Login User - All User
      requestBody:
        required: true
        content:
          'application/json':
            schema:
              type: object
              properties:
                email:
                  type: string
                password:
                  type: string
      responses:
        '200':
          $ref: '#/components/responses/ResponseLogin'
        '400':
          $ref: '#/components/responses/BadRequest'
        '500':
          $ref: '#/components/responses/ServerError'

  /customers:
    get:
      security:
        - bearerAuth: []
      tags:
        - Customers
      summary: Get All Customer - Admin
      responses:
        '200':
          $ref: '#/components/responses/StatusOK'
        '400':
          $ref: '#/components/responses/BadRequest'
        '500':
          $ref: '#/components/responses/ServerError'
  /customers/{id}:
    get:
      security:
        - bearerAuth: []
      tags:
        - Customers
      summary: Get Customer by ID - Admin
      parameters:
        - name: id
          in: path
          required: true
          description: ID For Spesific User
          schema:
            type: integer 
      responses:
        '200':
          $ref: '#/components/responses/StatusOK'
        '400':
          $ref: '#/components/responses/BadRequest'
        '500':
          $ref: '#/components/responses/ServerError'
    delete:
      security:
        - bearerAuth: []
      tags:
        - Customers
      summary: Delete Customer by ID - Admin
      parameters:
        - name: id
          in: path
          required: true
          description: ID For Spesific User
          schema:
            type: integer
      responses:
        '200':
          $ref: "#/components/responses/StatusOK"
        '400':
          $ref: "#/components/responses/BadRequest"
        '500':
          $ref: '#/components/responses/ServerError'

  /sellers:
    get:
      security:
        - bearerAuth: []
      tags:
        - Sellers
      summary: Get All Seller - Admin
      responses:
        '200':
          $ref: '#/components/responses/StatusOK'
        '400':
          $ref: '#/components/responses/BadRequest'
        '500':
          $ref: '#/components/responses/ServerError'
  /sellers/{id}:
    get:
      security:
        - bearerAuth: []
      tags:
        - Sellers
      summary: Get Seller by ID - Admin
      parameters:
        - name: id
          in: path
          required: true
          description: ID For Spesific User
          schema:
            type: integer 
      responses:
        '200':
          $ref: '#/components/responses/StatusOK'
        '400':
          $ref: '#/components/responses/BadRequest'
        '500':
          $ref: '#/components/responses/ServerError'
    delete:
      security:
        - bearerAuth: []
      tags:
        - Sellers
      summary: Delete Seller by ID - Admin
      parameters:
        - name: id
          in: path
          required: true
          description: ID For Spesific User
          schema:
            type: integer
      responses:
        '200':
          $ref: "#/components/responses/StatusOK"
        '400':
          $ref: "#/components/responses/BadRequest"
        '500':
          $ref: '#/components/responses/ServerError'

  
  /profiles/{id}:
    get:
      security:
        - bearerAuth: []
      tags:
        - Profiles
      summary: Get Profile - Customer, Seller
      responses:
        '200':
          $ref: '#/components/responses/StatusOK'
        '400':
          $ref: '#/components/responses/BadRequest'
        '500':
          $ref: '#/components/responses/ServerError'
    put:
      security:
        - bearerAuth: []
      tags:
        - Profiles
      summary: Edit Profile by ID - Customer, Seller
      parameters:
        - name: id
          in: path
          required: true
          description: ID For Spesific Recipe
          schema:
            type: integer
      requestBody:
        required: true
        content:
          'application/json':
            schema:
              type: object
              properties:
                name:
                  type: string
                price:
                  type: integer
                stock:
                  type: integer
      responses:
        '200':
          $ref: '#/components/responses/StatusOK'
        '400':
          $ref: '#/components/responses/BadRequest'
        '500':
          $ref: '#/components/responses/ServerError'

  /recipes:
    get:
      tags:
        - Recipes
      summary: Get All Recipe - All User
      responses:
        '200':
          $ref: '#/components/responses/StatusOK'
        '400':
          $ref: '#/components/responses/BadRequest'
        '500':
          $ref: '#/components/responses/ServerError'
  /recipes?category=manis:
    get:
      tags:
        - Recipes
      summary: Get Recipe by Categorys - All User
      responses:
        '200':
          $ref: '#/components/responses/StatusOK'
        '400':
          $ref: '#/components/responses/BadRequest'
        '500':
          $ref: '#/components/responses/ServerError'

  # /recipes/{id}:
  #   get:
  #     tags:
  #       - Recipes
  #     summary: Get Recipe by ID - All User
  #     parameters:
  #       - name: id
  #         in: path
  #         required: true
  #         description: ID For Spesific Recipe
  #         schema:
  #           type: integer 
  #     responses:
  #       '200':
  #         $ref: '#/components/responses/StatusOK'
  #       '400':
  #         $ref: '#/components/responses/BadRequest'
  #       '500':
  #         $ref: '#/components/responses/ServerError'
  #   put:
  #     security:
  #       - bearerAuth: []
  #     tags:
  #       - Recipes
  #     summary: Edit Recipe by ID
  #     parameters:
  #       - name: id
  #         in: path
  #         required: true
  #         description: ID For Spesific Recipe
  #         schema:
  #           type: integer
  #     requestBody:
  #       required: true
  #       content:
  #         'application/json':
  #           schema:
  #             type: object
  #             properties:
  #               name:
  #                 type: string
  #               price:
  #                 type: integer
  #               stock:
  #                 type: integer
  #     responses:
  #       '200':
  #         $ref: '#/components/responses/StatusOK'
  #       '400':
  #         $ref: '#/components/responses/BadRequest'
  #       '500':
  #         $ref: '#/components/responses/ServerError'
  #   delete:
  #     security:
  #       - bearerAuth: []
  #     tags:
  #       - Recipes
  #     summary: Delete Product by ID
  #     parameters:
  #       - name: id
  #         in: path
  #         required: true
  #         description: ID For Spesific Product
  #         schema:
  #           type: integer
  #     responses:
  #       '200':
  #         $ref: "#/components/responses/StatusOK"
  #       '400':
  #         $ref: "#/components/responses/BadRequest"
  #       '500':
  #         $ref: '#/components/responses/ServerError'

  /categories:
    get:
      security:
        - bearerAuth: []
      tags:
        - Categories
      summary: Get All Recipe Category - Admin
      responses:
        '200':
          $ref: '#/components/responses/StatusOK'
        '400':
          $ref: '#/components/responses/BadRequest'
        '500':
          $ref: '#/components/responses/ServerError'
    post:
      security:
        - bearerAuth: []
      tags:
        - Categories
      summary: Add Recipe Category - Admin
      requestBody:
        required: true
        content:
          'application/json':
            schema:
              type: object
              properties:
                name:
                  type: string
      responses:
        '200':
          $ref: '#/components/responses/StatusOK'
        '400':
          $ref: '#/components/responses/BadRequest'
        '500':
          $ref: '#/components/responses/ServerError'
  /categories/{id}:
    get:
      security:
        - bearerAuth: []
      tags:
        - Categories
      summary: Get Recipe Categories by ID - Admin
      parameters:
        - name: id
          in: path
          required: true
          description: ID For Spesific Recipe Category
          schema:
            type: integer 
      responses:
        '200':
          $ref: '#/components/responses/StatusOK'
        '400':
          $ref: '#/components/responses/BadRequest'
        '500':
          $ref: '#/components/responses/ServerError'
    put:
      security:
        - bearerAuth: []
      tags:
        - Categories
      summary: Edit Recipe Categories by ID - Admin
      parameters:
        - name: id
          in: path
          required: true
          description: ID For Spesific Recipe Categories
          schema:
            type: integer
      requestBody:
        required: true
        content:
          'application/json':
            schema:
              type: object
              properties:
                name:
                  type: string
      responses:
        '200':
          $ref: '#/components/responses/StatusOK'
        '400':
          $ref: '#/components/responses/BadRequest'
        '500':
          $ref: '#/components/responses/ServerError'
    delete:
      security:
        - bearerAuth: []
      tags:
        - Categories
      summary: Delete Recipe Categories by ID - Admin
      parameters:
        - name: id
          in: path
          required: true
          description: ID For Spesific Categories
          schema:
            type: integer
      responses:
        '200':
          $ref: "#/components/responses/StatusOK"
        '400':
          $ref: "#/components/responses/BadRequest"
        '500':
          $ref: '#/components/responses/ServerError'
 
  /recipes/stocks:
    post:
      security:
        - bearerAuth: []
      tags:
        - Stocks
      summary: Add Stock Recipe - Seller
      requestBody:
        required: true
        content:
          'application/json':
            schema:
              type: object
              properties:
                qty:
                  type: integer
      responses:
        '200':
          $ref: '#/components/responses/StatusOK'
        '400':
          $ref: '#/components/responses/BadRequest'
        '500':
          $ref: '#/components/responses/ServerError'
  /recipes/{id}/stocks:
    put:
      security:
        - bearerAuth: []
      tags:
        - Stocks
      summary: Edit Stock Recipe by Recipe ID - Seller
      parameters:
        - name: id
          in: path
          required: true
          description: ID For Spesific Recipe Categories
          schema:
            type: integer
      requestBody:
        required: true
        content:
          'application/json':
            schema:
              type: object
              properties:
                name:
                  type: string
      responses:
        '200':
          $ref: '#/components/responses/StatusOK'
        '400':
          $ref: '#/components/responses/BadRequest'
        '500':
          $ref: '#/components/responses/ServerError'
  /transactions?status=done:
    get:
      security:
        - bearerAuth: []
      tags:
        - Transaction Histories
      summary: Get Transaction Histories - All User
      parameters:
        - name: id
          in: path
          required: true
          description: Get All Transaction History
          schema:
            type: integer 
      responses:
        '200':
          $ref: '#/components/responses/StatusOK'
        '400':
          $ref: '#/components/responses/BadRequest'
        '500':
          $ref: '#/components/responses/ServerError'
  /transactions/{id}:
    get:
      security:
        - bearerAuth: []
      tags:
        - Transactions
      summary: Get Transaction Detail by Transaction ID - All User
      parameters:
        - name: id
          in: path
          required: true
          description: ID For Spesific Transaction
          schema:
            type: integer 
      responses:
        '200':
          $ref: '#/components/responses/StatusOK'
        '400':
          $ref: '#/components/responses/BadRequest'
        '500':
          $ref: '#/components/responses/ServerError'
          
  /carts/{id}:
    get:
      security:
        - bearerAuth: []
      tags:
        - Carts
      summary: Get Recipe Item by Cart ID
      parameters:
        - name: id
          in: path
          required: true
          description: ID For Spesific Cart
          schema:
            type: integer 
      responses:
        '200':
          $ref: '#/components/responses/StatusOK'
        '400':
          $ref: '#/components/responses/BadRequest'
        '500':
          $ref: '#/components/responses/ServerError'
    put:
      security:
        - bearerAuth: []
      tags:
        - Carts
      summary: Edit Recipe Item in Cart by Cart ID
      parameters:
        - name: id
          in: path
          required: true
          description: ID For Spesific Cart
          schema:
            type: integer
      requestBody:
        required: true
        content:
          'application/json':
            schema:
              type: object
              properties:
                name:
                  type: string
      responses:
        '200':
          $ref: '#/components/responses/StatusOK'
        '400':
          $ref: '#/components/responses/BadRequest'
        '500':
          $ref: '#/components/responses/ServerError'
  
  /checkout:
    post:
      security:
        - bearerAuth: []
      tags:
        - Checkouts
      summary: Add Cart to Transaction - Customer
      requestBody:
        required: true
        content:
          'application/json':
            schema:
              type: object
              properties:
                name:
                  type: string
                cart_id:
                  type: integer
      responses:
        '200':
          $ref: '#/components/responses/StatusOK'
        '400':
          $ref: '#/components/responses/BadRequest'
        '500':
          $ref: '#/components/responses/ServerError'

components:
  responses:
    StatusOK:
      description: Status OK
      content:
        application/json:
          example:
            success: true
            message: Status OK
    BadRequest:
      description: Bad request
      content:
        application/json:
          example:
            success: false
            message: Bad Request
    ServerError:
      description: Internal Server Error
      content:
        application/json:
          example:
            success: false
            message: Internal Server Error
    ResponseRegister:
      description: Success Register Account
      content:
        application/json:
          example:
            success: true
            message: Success Register Account
    ResponseLogin:
      description: Success Login
      content:
        application/json:
          example:
            success: true
            message: Success Login
            token: exc54WqsR6ryu.mYTW340iPIlkqb